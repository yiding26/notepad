package yiding.notepad.contol;import yiding.NotepadApplication;import yiding.notepad.utils.FileIO;import yiding.notepad.utils.Language;import yiding.notepad.view.component.InsertButton;import yiding.notepad.view.component.TextArea;import yiding.notepad.view.NotepadWindow;import javax.swing.*;import java.awt.*;import java.awt.datatransfer.DataFlavor;import java.awt.datatransfer.Transferable;import java.awt.datatransfer.UnsupportedFlavorException;import java.awt.dnd.DnDConstants;import java.awt.dnd.DropTargetDropEvent;import java.io.File;import java.io.IOException;public class NotepadWindowController extends AbstractWindowService {    public boolean isSave = true;    static final String defaultPath = Language.getLanguage("defaultFilename");    public String last = "";    public FileIO file = new FileIO(defaultPath);    /**     * 刷新窗口的标题     */    public void refreshWindow() {        TextArea textArea = this.getComponent("textarea");        if (textArea.isEditable()) {            this.isSave = this.last.equals(textArea.getText());            String title = "";            if (!this.isSave) title = "* ";            this.setTitle(title + new File(this.file.path).getName());        } else this.setTitle(new File(this.file.path).getName());        InsertButton tipButton = getComponent("tipButton");        tipButton.setText(file.path);        InsertButton caretPosButton = getComponent("caretPosButton");        if (textArea.isEditable()) {            Point pos = textArea.getCaretPos();            String caretPosText = pos.x + ":" + pos.y;            if (textArea.getSelectedText() != null) {                caretPosText += " ";                caretPosText += String.format(Language.getLanguage("notepad.caretPos.selected.format"), textArea.getSelectedText().length());            }            caretPosButton.setText(caretPosText);        } else caretPosButton.setText("");    }    public void drop(DropTargetDropEvent dtde) {        if (dtde.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {            dtde.acceptDrop(DnDConstants.ACTION_REFERENCE);            Transferable tf = dtde.getTransferable();            try {                java.util.List<File> files = (java.util.List<File>) tf.getTransferData(DataFlavor.javaFileListFlavor);                dtde.dropComplete(true);                if (isSave)                    if (files.size() == 1) {                        file.path = files.getFirst().getAbsolutePath();                        loadFile();                    } else {                        file.path = files.getFirst().getAbsolutePath();                        loadFile();                        for (int i = 1; i < files.size(); i++) {                            NotepadWindow notepadWindow = new NotepadWindow();                            notepadWindow.showWindow();                            notepadWindow.controller.file.path = files.get(i).getAbsolutePath();                            new Thread(() -> notepadWindow.controller.loadFile()).start();                        }                    }                else for (File value : files) {                        NotepadWindow notepadWindow = new NotepadWindow();                        notepadWindow.showWindow();                        notepadWindow.controller.file.path = value.getAbsolutePath();                        new Thread(() -> notepadWindow.controller.loadFile()).start();                    }            } catch (UnsupportedFlavorException | IOException e) {                NotepadApplication.logger.error(e.getMessage());            }        } else dtde.rejectDrop();    }    /**     * 新建文件     */    public void newFile() {        if (!this.isSave) {            int result = JOptionPane.showConfirmDialog(this.getWindow(), Language.getLanguage("notepad.notSave"), this.file.path, JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);            if (result == JOptionPane.OK_OPTION) {                if (!this.saveFile()) return;            } else if (result == JOptionPane.CANCEL_OPTION) return;        }        this.file.path = (String) JOptionPane.showInputDialog(getWindow(), "", Language.getLanguage("notepad.newFile"), JOptionPane.QUESTION_MESSAGE, null, null, Language.getLanguage("notepad.defaultFilename"));        TextArea textArea = this.getComponent("textarea");        textArea.setEditable(false);        this.last = "";        textArea.setText(this.last);        this.refreshWindow();        textArea.setEditable(true);    }    /**     * 打开文件     */    public void openFile() {        if (!this.isSave) {            int result = JOptionPane.showConfirmDialog(getWindow(), Language.getLanguage("notepad.notSave"), this.file.path, JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);            if (result == JOptionPane.OK_OPTION) {                if (!this.saveFile()) return;            } else if (result == JOptionPane.CANCEL_OPTION) return;        }        String newPath = FileIO.get(getWindow(), Language.getLanguage("notepad.openFile"), "");        if (newPath.isEmpty()) return;        this.file = new FileIO(newPath);        this.loadFile();        NotepadApplication.logger.info(String.format("open file %s", file.path));    }    public boolean saveFile() {        String oldPath = this.file.path;        if (this.file.path.equals(defaultPath)) {            this.file.path = FileIO.get(getWindow(), Language.getLanguage("notepad.saveFile"), "");            if (oldPath.equals(this.file.path) || this.file.path.isEmpty()) return false;        }        System.out.println(this.file.path);        TextArea textArea = getComponent("textarea");        if (this.file.write(textArea.getText())) {            last = textArea.getText();            NotepadApplication.logger.info(String.format("save file %s", file.path));        } else JOptionPane.showMessageDialog(getWindow(), Language.getLanguage("notepad.saveFailed"), this.file.path, JOptionPane.ERROR_MESSAGE);        refreshWindow();        return true;    }    public void saveAsFile() {        String lastPath = this.file.path;        this.file.path = FileIO.get(getWindow(), Language.getLanguage("notepad.saveAsFile"), this.file.path);        if (this.file.path.equals(lastPath) || this.file.path.isEmpty()) return;        TextArea textArea = getComponent("textarea");        if (file.write(textArea.getText())) last = textArea.getText();        else JOptionPane.showMessageDialog(getWindow(), Language.getLanguage("notepad.saveFailed"), this.file.path, JOptionPane.ERROR_MESSAGE);        refreshWindow();    }    public void loadFile() {        TextArea textArea = getComponent("textarea");        refreshWindow();        this.last = this.file.read();        textArea.discardAllEdits();        isSave = true;        new Thread(() -> {            textArea.setText(this.last);            refreshWindow();            NotepadApplication.logger.info(String.format("load file %s", file.path));        }).start();    }    public void openInFileBrowser() {        Desktop.getDesktop().browseFileDirectory(this.file.file);    }    @Override    public boolean onClose() {        if (!this.isSave) {            int result = JOptionPane.showConfirmDialog(getWindow(), Language.getLanguage("notSave"), this.file.path, JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);            if (result == JOptionPane.OK_OPTION) saveFile();            else return result != JOptionPane.CANCEL_OPTION;        }        return true;    }}